#define TEST_MAX_MDB_CMD    7
#define TEST_VMC_LEVEL      2

uint8_t serial_number[29] = "ABCSBCA0022    RVM-28-4    10";
uint8_t periph_sn[29]     = "XYZSN0123456789MODEL123456712";

// #define MDB_DEBUG

#ifdef MDB_DEBUG
    #define MDB_DEBUG_PRINTF(...) printf(__VA_ARGS__)
#else
    #define MDB_DEBUG_PRINTF(...)
#endif

typedef struct
{
    uint16_t str[MDB_MAX_BUF_LEN];
    uint8_t  len;
} cmd_t;

cmd_t cmd_ack         = { { 0x000 }, 1 };

cmd_t cmd_reset       = { { 0x110, 0x010 }, 2 };

cmd_t cmd_poll        = { { 0x112, 0x012 }, 2 };
cmd_t cmd_poll_resp   = { { 0x000, 0x100 }, 2 };

cmd_t cmd_setup1      = { { 0x111, /* SETUP                                     */
                            0x000, /* Config Data                               */
                            0x002, /* VMC Feature Level.                        */
                            0x000, /* Columns on Display.                       */
                            0x000, /* Rows on Display.                          */
                            0x000, /* Display Information.                      */
                            0x013 }, 7 };
cmd_t cmd_setup1_resp = { { 0x001, /* Reader config data Header.                */
                            0x002, /* Reader Feature Level.                     */
                            0x002, /* Country / Currency Code.                  */
                            0x083, /* 0x0283 - 643 (dec) - RUB.                 */
                            0x001, /* Scale Factor.                             */
                            0x001, /* Decimal Places.                           */
                            0x005, /* Application Maximum Response Time (sec)   */
                            0x000, /* Miscellaneous Options                     */
                            0x18F }, 9 };

cmd_t cmd_setup2      = { { 0x111, /* SETUP                                     */
                            0x001, /* Max/Min Prices                            */
                            0x0FF, /* Maximum Price.                            */
                            0x0FF, /*                                           */
                            0x000, /* Minimum Price.                            */
                            0x000, /*                                           */
                            0x010 }, 7 };

cmd_t cmd_exp_req     = { { 0x117, /* Expansion                                 */
                            0x000, /* Request ID                                */
                            [31] = 0x008}, 32};
for (size_t i = 0; i < 29; i++) cmd_exp_req.str[i + 2] = serial_number[i];

cmd_t cmd_reader      = { { 0x114, /* Reader                                    */
                            0x001, /* Enable                                    */
                            0x015 }, 3 };

mdb_cmd_t mdb_cmd_struct[TEST_MAX_MDB_CMD];
uint8_t idx = 0;
uint16_t buf[MDB_MAX_BUF_LEN];
    
void QueueCmdPushCB(mdb_cmd_t cmd_struct)
{
    if (idx == TEST_MAX_MDB_CMD)
    {
        assert("Queue overflow");
        exit(1);
    }
    mdb_cmd_struct[idx].cmd    = cmd_struct.cmd;
    mdb_cmd_struct[idx].subcmd = cmd_struct.subcmd;
    idx++;
}

mdb_cmd_t QueueCmdPullCB(void)
{
    mdb_cmd_t cmd_struct;
    cmd_struct = mdb_cmd_struct[0];

    if (idx == 0)
    {
        cmd_struct.cmd = MDB_EMPTY_CMD_E;
        return cmd_struct;
    }

    if (idx == 1)
    {
        idx--;
        return cmd_struct;
    }
    idx--;

    for (uint8_t i = 0; i < idx; i++)
    {
        mdb_cmd_struct[i].cmd    = mdb_cmd_struct[i + 1].cmd;
        mdb_cmd_struct[i].subcmd = mdb_cmd_struct[i + 1].subcmd;
    }

    return cmd_struct;
}

void TxBufCB(const uint16_t * pBuf, uint8_t len)
{
    MDB_DEBUG_PRINTF("[tx]->: ");
    for(int i = 0; i < len; i++)
    {
        buf[i] = pBuf[i];
        MDB_DEBUG_PRINTF("0x%03X ", pBuf[i]);
    }
    MDB_DEBUG_PRINTF("\n");
}

void WrapMdbPollReceive(uint16_t ch)
{
    MDB_DEBUG_PRINTF("0x%03X ", ch);
    if (ch & 0x100)
        MDB_DEBUG_PRINTF("\n");

    MdbPollReceive(ch);
}

void ReconfigCB(void* p_data)
{
    mdb_t* p_mdb_dev = (mdb_t*)p_data;
    MDB_DEBUG_PRINTF("Reconfig:\n");
    MDB_DEBUG_PRINTF("\tresp time = %d\n", p_mdb_dev->conf.max_resp_time);
    MDB_DEBUG_PRINTF("\tcashless level = %d\n", p_mdb_dev->conf.cashless_level);
}
